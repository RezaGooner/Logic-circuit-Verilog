/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Clock - 8 times
    NandGate - 31 times
    DigitalLed - 18 times
    Input - 13 times
    NotGate - 6 times
    Button - 1 times
    DflipFlop - 8 times
    OrGate - 1 times
    AndGate - 1 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
    Clock - Use a single global clock
    Button - Buttons are not natively supported in verilog, consider using Inputs instead
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg inp_0, clk_0, clk_1, inp_1, J, K, inp_2, inp_3;


  D_latch DUT0(clk_0, inp_0);

  \Master-Slave_D_Flip_Flop  DUT1(clk_0, clk_1, inp_0);

  JK_FF DUT2(clk_0, inp_0, inp_1);

  Master_Slave_JK_FF DUT3(clk_0, inp_0, inp_1);

  MS_JK_FF_using_D_FF DUT4(clk_0, J, K);

  Edge_Triggered_FF_Positive DUT5(clk_0, inp_0);

  \4-bit_D_latch  DUT6(clk_0, inp_0, inp_1, inp_2, inp_3);

  always begin
    #10
    clk_0 = 0;
    clk_1 = 0;
    #10
    clk_0 = 1;
    clk_1 = 1;
  end

  initial begin
    inp_0 = 0;
    inp_1 = 0;
    J = 0;
    K = 0;
    inp_2 = 0;
    inp_3 = 0;

    #15

    #10

    $finish;

  end
endmodule

*/

module D_latch(clk_0, inp_0);
  input inp_0, clk_0;
  wire nand_3_out, nand_0_out, nand_1_out, nand_2_out, not_0_out;
  assign nand_3_out = ~(clk_0 & inp_0);
  assign nand_0_out = ~(nand_3_out & nand_1_out);
  assign nand_1_out = ~(nand_0_out & nand_2_out);
  
      always @ (*)
        $display("DigitalLed:nand_1_out=%d", nand_1_out);
  
      always @ (*)
        $display("DigitalLed:nand_0_out=%d", nand_0_out);
  assign nand_2_out = ~(clk_0 & not_0_out);
  assign not_0_out = ~inp_0;
endmodule

module \Master-Slave_D_Flip_Flop (clk_0, clk_1, inp_0);
  input inp_0, clk_0, clk_1;
  wire Button_0_out, Master_Q, Slave_Q, Slave_Q_inv, not_2_out, nand_4_out, nand_6_out, nand_7_out, nand_5_out, nand_1_out, nand_3_out, nand_2_out, nand_0_out, not_0_out, not_1_out;
  Button0 Button_0(Button_0_out);
  DflipFlop Master(Master_Q, , clk_0, Button_0_out, , , );
  DflipFlop Slave(Slave_Q, Slave_Q_inv, not_0_out, Master_Q, , , );
  
      always @ (*)
        $display("DigitalLed:Slave_Q_inv=%d", Slave_Q_inv);
  
      always @ (*)
        $display("DigitalLed:Slave_Q=%d", Slave_Q);
  assign not_2_out = ~clk_1;
  assign nand_4_out = ~(not_2_out & nand_2_out);
  assign nand_6_out = ~(nand_7_out & nand_4_out);
  
      always @ (*)
        $display("DigitalLed:nand_6_out=%d", nand_6_out);
  assign nand_7_out = ~(nand_6_out & nand_5_out);
  
      always @ (*)
        $display("DigitalLed:nand_7_out=%d", nand_7_out);
  assign nand_5_out = ~(not_2_out & nand_3_out);
  assign nand_1_out = ~(not_1_out & clk_1);
  assign nand_3_out = ~(nand_2_out & nand_1_out);
  assign nand_2_out = ~(nand_0_out & nand_3_out);
  assign nand_0_out = ~(inp_0 & clk_1);
  assign not_0_out = ~clk_0;
  assign not_1_out = ~inp_0;
endmodule

module JK_FF(clk_0, inp_0, inp_1);
  input inp_0, inp_1, clk_0;
  wire nand_1_out, nand_3_out, nand_2_out, nand_0_out;
  assign nand_1_out = ~(clk_0 & inp_1);
  assign nand_3_out = ~(nand_2_out & nand_1_out);
  
      always @ (*)
        $display("DigitalLed:nand_3_out=%d", nand_3_out);
  assign nand_2_out = ~(nand_0_out & nand_3_out);
  
      always @ (*)
        $display("DigitalLed:nand_2_out=%d", nand_2_out);
  assign nand_0_out = ~(inp_0 & clk_0);
endmodule

module Master_Slave_JK_FF(clk_0, inp_0, inp_1);
  input inp_0, inp_1, clk_0;
  wire not_0_out, nand_4_out, nand_6_out, nand_7_out, nand_5_out, nand_1_out, nand_3_out, nand_2_out, nand_0_out;
  assign not_0_out = ~clk_0;
  assign nand_4_out = ~(nand_2_out & not_0_out);
  assign nand_6_out = ~(nand_7_out & nand_4_out);
  
      always @ (*)
        $display("DigitalLed:nand_6_out=%d", nand_6_out);
  assign nand_7_out = ~(nand_5_out & nand_6_out);
  
      always @ (*)
        $display("DigitalLed:nand_7_out=%d", nand_7_out);
  assign nand_5_out = ~(not_0_out & nand_3_out);
  assign nand_1_out = ~(inp_1 & clk_0);
  assign nand_3_out = ~(nand_2_out & nand_1_out);
  assign nand_2_out = ~(nand_3_out & nand_0_out);
  assign nand_0_out = ~(inp_0 & clk_0);
endmodule

module MS_JK_FF_using_D_FF(clk_0, J, K);
  input J, K, clk_0;
  wire DflipFlop_0_Q, DflipFlop_1_Q, DflipFlop_1_Q_inv, nand_0_out, or_0_out, and_0_out, not_0_out;
  DflipFlop DflipFlop_0(DflipFlop_0_Q, , clk_0, or_0_out, , , );
  DflipFlop DflipFlop_1(DflipFlop_1_Q, DflipFlop_1_Q_inv, clk_0, DflipFlop_0_Q, , , );
  
      always @ (*)
        $display("DigitalLed:DflipFlop_1_Q_inv=%d", DflipFlop_1_Q_inv);
  assign nand_0_out = ~(DflipFlop_1_Q & J);
  assign or_0_out = nand_0_out | and_0_out;
  assign and_0_out = not_0_out & DflipFlop_1_Q;
  
      always @ (*)
        $display("DigitalLed:DflipFlop_1_Q=%d", DflipFlop_1_Q);
  assign not_0_out = ~K;
endmodule

module Edge_Triggered_FF_Positive(clk_0, inp_0);
  input inp_0, clk_0;
  wire nand_2_out, nand_3_out, nand_0_out, nand_1_out, nand_4_out, nand_5_out;
  assign nand_2_out = ~(clk_0 & nand_3_out);
  assign nand_3_out = ~(nand_2_out & inp_0);
  assign nand_0_out = ~(nand_3_out & nand_1_out);
  assign nand_1_out = ~(nand_0_out & clk_0);
  assign nand_4_out = ~(nand_5_out & nand_1_out);
  
      always @ (*)
        $display("DigitalLed:nand_4_out=%d", nand_4_out);
  assign nand_5_out = ~(nand_2_out & nand_4_out);
  
      always @ (*)
        $display("DigitalLed:nand_5_out=%d", nand_5_out);
endmodule

module \4-bit_D_latch (clk_0, inp_0, inp_1, inp_2, inp_3);
  input inp_0, inp_1, inp_2, inp_3, clk_0;
  wire DflipFlop_2_Q, DflipFlop_3_Q, DflipFlop_1_Q, DflipFlop_0_Q;
  DflipFlop DflipFlop_2(DflipFlop_2_Q, , clk_0, inp_2, , , );
  
      always @ (*)
        $display("DigitalLed:DflipFlop_2_Q=%d", DflipFlop_2_Q);
  DflipFlop DflipFlop_3(DflipFlop_3_Q, , clk_0, inp_3, , , );
  
      always @ (*)
        $display("DigitalLed:DflipFlop_3_Q=%d", DflipFlop_3_Q);
  DflipFlop DflipFlop_1(DflipFlop_1_Q, , clk_0, inp_1, , , );
  
      always @ (*)
        $display("DigitalLed:DflipFlop_1_Q=%d", DflipFlop_1_Q);
  DflipFlop DflipFlop_0(DflipFlop_0_Q, , clk_0, inp_0, , , );
  
      always @ (*)
        $display("DigitalLed:DflipFlop_0_Q=%d", DflipFlop_0_Q);
endmodule
// Skeleton for Button0
    /*
    module Button0(out);
      output reg out;
    
      initial begin
        //do something with the button here
      end
    endmodule
    */
    
module DflipFlop(q, q_inv, clk, d, a_rst, pre, en);
    parameter WIDTH = 1;
    output reg [WIDTH-1:0] q, q_inv;
    input clk, a_rst, pre, en;
    input [WIDTH-1:0] d;

    always @ (posedge clk or posedge a_rst)
    if (a_rst) begin
        q <= 'b0;
        q_inv <= 'b1;
    end else if (en == 0) ;
    else begin
        q <= d;
        q_inv <= ~d;
    end
endmodule
    
