/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 1 times
    Multiplexer - 3 times
    Output - 3 times
    DigitalLed - 3 times
    Power - 1 times
    Ground - 1 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg [1:0] A_B;

  wire B, Equal, A;

  Main DUT0(B, Equal, A, A_B);

  initial begin
    A_B = 0;

    #15
    $display("B = %b", B);
    $display("Equal = %b", Equal);
    $display("A = %b", A);

    #10
    $display("B = %b", B);
    $display("Equal = %b", Equal);
    $display("A = %b", A);

    $finish;

  end
endmodule

*/

module Main(B, Equal, A, A_B);
  output B,  Equal,  A;
  input [1:0] A_B;
  wire Multiplexer_2_out, Multiplexer_1_out, Multiplexer_0_out, Power_0_out, Ground_0_out;
  Multiplexer4 Multiplexer_2(Multiplexer_2_out, Ground_0_out, Ground_0_out, Power_0_out, Ground_0_out, A_B);
  assign A = Multiplexer_2_out;
  
      always @ (*)
        $display("DigitalLed:Multiplexer_2_out=%d", Multiplexer_2_out);
  Multiplexer4 Multiplexer_1(Multiplexer_1_out, Power_0_out, Ground_0_out, Ground_0_out, Power_0_out, A_B);
  assign Equal = Multiplexer_1_out;
  
      always @ (*)
        $display("DigitalLed:Multiplexer_1_out=%d", Multiplexer_1_out);
  Multiplexer4 Multiplexer_0(Multiplexer_0_out, Ground_0_out, Power_0_out, Ground_0_out, Ground_0_out, A_B);
  assign B = Multiplexer_0_out;
  
      always @ (*)
        $display("DigitalLed:Multiplexer_0_out=%d", Multiplexer_0_out);
  assign Power_0_out = ~1'b0;
  assign Ground_0_out = 1'b0;
endmodule

module Multiplexer4(out, in0, in1, in2, in3, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3;
  input [1:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
    endcase
endmodule

